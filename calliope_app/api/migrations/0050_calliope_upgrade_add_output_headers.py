# Generated by Rob Spencer on 2021-07-27
from django.db import migrations

import os
import shutil
import datetime
import pandas as pd
import numpy as np


def forward(apps, schema_editor):
    runs = apps.get_model('api', 'Run').objects.filter(status='SUCCESS')
    for r, run in enumerate(runs):
        try:
            outputs_path = run.outputs_path
            if outputs_path:
                # --- BACKUP
                backup = outputs_path + '_backup'
                if not os.path.exists(backup):
                    shutil.copytree(outputs_path, backup)
                # --- META
                # Locations
                locs = list(pd.read_csv(
                    os.path.join(backup, 'inputs_loc_coordinates.csv'),
                    header=None)[1].unique())
                if 'locs' in locs:
                    print('Headers exist!', run.created)
                    continue
                # Technologies
                techs = list(pd.read_csv(
                    os.path.join(backup, 'inputs_names.csv'),
                    header=None)[0].unique())
                techs += list(pd.read_csv(
                    os.path.join(backup, 'inputs_lookup_remotes.csv'),
                    header=None)[1].unique())
                # Carriers
                carriers = pd.read_csv(
                    os.path.join(backup, 'inputs_lookup_loc_carriers.csv'),
                    header=None)
                index = 1 if set(carriers[0].unique()).issubset(locs) else 0
                carriers = list(carriers[index].unique())
                # --- UPDATE
                files = os.listdir(backup)
                for file in files:
                    try:
                        src = os.path.join(backup, file)
                        dst = os.path.join(outputs_path, file)
                        try:
                            d = pd.read_csv(src, header=None)
                        except pd.errors.EmptyDataError:
                            continue
                        # Metric
                        if 'inputs' in file:
                            metric = file.split('inputs_')[1][:-4]
                        else:
                            metric = file.split('results_')[1][:-4]
                        try:
                            int(metric[-2:])
                            metric = metric[:-3]
                        except Exception:
                            pass
                        # Update Each Column Header
                        columns = list(d.columns)
                        for i, col in enumerate(columns):
                            values = list(d[col].unique())
                            if len(values) == 1 and 'monetary' in values:
                                columns[i] = 'costs'
                            elif set(['in', 'out']).issubset(values):
                                columns[i] = 'carrier_tiers'
                            elif set(values).issubset(['lat', 'lon']):
                                columns[i] = 'coordinates'
                            elif set(values).issubset(locs):
                                columns[i] = 'locs'
                            elif set(values).issubset(carriers):
                                columns[i] = 'carriers'
                            elif set(values).issubset(techs):
                                columns[i] = 'techs'
                            elif 'group_share' in metric and i == 1:
                                columns[i] = 'techlists'
                            else:
                                try:
                                    datetime.datetime.strptime(values[0],
                                                               '%Y-%m-%d %H:%M:%S')
                                    if metric == 'max_demand_timesteps':
                                        columns[i] = metric
                                    else:
                                        columns[i] = 'timesteps'
                                except Exception:
                                    try:
                                        datetime.datetime.strptime(values[0],
                                                                   '%Y-%m-%d')
                                        columns[i] = 'datesteps'
                                    except Exception:
                                        try:
                                            if 'cluster' in metric and sorted(values) == list(range(np.max(values) + 1)):
                                                columns[i] = 'cluster'
                                            else:
                                                raise
                                        except Exception:
                                            columns[i] = metric
                        if 'cluster' in columns and metric not in columns:
                            i = columns.index('cluster')
                            columns[i] = metric
                        d.columns = columns
                        if len(columns) != len(set(columns)):
                            print('\n\n', r, file, '\n')
                            print(d.head())
                        d.to_csv(dst, index=False)
                    except Exception as e:
                        print(e)
                        pass
        except Exception as e:
            print(e)
            pass


def reverse(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0049_auto_20210728_0330'),
    ]

    operations = [
        migrations.RunPython(forward, reverse),
    ]
